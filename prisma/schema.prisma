// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  MANAGER
  ORGANISATION_ADMIN
  ORGANISATION_USER
}

enum DocumentType {
  PAN
  AADHAR_FRONT
  AADHAR_BACK
  PASSPORT_FRONT
  PASSPORT_BACK
  UNIVERSITY_FEE_RECEIPT
  LOAN_SANCTION_LETTER
  UNIVERSITY_OFFER_LETTER
  OTHER
}

enum DocumentRole {
  SENDER
  BENEFICIARY
  STUDENT
  ORDER
}

enum OrderStatus {
  Received
  Verified
  Pending
  Rejected
  Completed
  QuoteDownloaded
  Authorize
  DocumentsPlaced
  RateExpired
}

model User {
  id             String               @id @default(cuid())
  name           String?
  email          String               @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  status         Boolean              @default(true)
  role           UserRole             @default(ORGANISATION_USER)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  accounts       Account[]
  sessions       Session[]
  resetTokens    PasswordResetToken[]
  organisation   Organisation?        @relation(fields: [organisationId], references: [id])
  organisationId String?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [email], references: [email], onDelete: Restrict)

  @@map("password_reset_tokens")
}

model Organisation {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  email       String
  phoneNumber String
  logoUrl     String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("organisations")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model Sender {
  id                   String   @id @default(cuid())
  studentName          String
  studentEmailOriginal String
  studentEmailFake     String
  phoneNumber          String
  addressLine1         String
  addressLine2         String?
  state                String
  postalCode           String
  nationality          String   @default("indian")
  relationship         String   @default("self")
  senderName           String?
  bankCharges          String?
  mothersName          String?
  dob                  String?
  senderNationality    String?  @default("indian")
  senderEmail          String?
  sourceOfFunds        String?
  occupationStatus     String?
  payerAccountNumber   String?
  payerBankName        String?
  senderAddressLine1   String?
  senderAddressLine2   String?
  senderState          String?
  senderPostalCode     String?
  status               String   @default("pending")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("senders")
}

model Beneficiary {
  id                        String   @id @default(cuid())
  receiverFullName          String
  receiverCountry           String
  address                   String
  receiverBank              String
  receiverBankAddress       String
  receiverBankCountry       String
  receiverAccount           String
  receiverBankSwiftCode     String
  iban                      String?
  sortCode                  String?
  transitNumber             String?
  bsbCode                   String?
  routingNumber             String?
  anyIntermediaryBank       String   @default("NO")
  intermediaryBankName      String?
  intermediaryBankAccountNo String?
  intermediaryBankIBAN      String?
  intermediaryBankSwiftCode String?
  totalRemittance           String
  field70                   String?
  status                    Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("beneficiaries")
}

model Order {
  id                  String      @id @default(cuid())
  purpose             String
  foreignBankCharges  Float
  payer               String
  forexPartner        String
  margin              Float
  receiverBankCountry String
  studentName         String
  consultancy         String
  ibrRate             Float
  amount              Float
  currency            String
  totalAmount         Float
  customerRate        Float
  status              OrderStatus
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  createdBy           String
  quote               Json
  calculations        Json
  generatedPDF        String

  @@map("orders")
}

model Document {
  id         String       @id @default(cuid())
  role       DocumentRole
  userId     String
  type       DocumentType
  imageUrl   String
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("documents")
}

model DownloadedQuotes {
  id           String   @id @default(cuid())
  username     String
  createdBy    String
  quote        Json
  calculations Json
  generatedPDF String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("downloaded_quotes")
}
