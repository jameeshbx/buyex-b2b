generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(cuid())
  name           String?
  email          String               @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole             @default(ORGANISATION_USER)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  organisationId String?
  status         Boolean              @default(true)
  agentRate      Float?               @default(0)
  buyexRate      Float?               @default(0)
  forexPartner   String?
  accounts       Account[]
  resetTokens    PasswordResetToken[]
  sessions       Session[]
  organisation   Organisation?        @relation(fields: [organisationId], references: [id])

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [email], references: [email])

  @@map("password_reset_tokens")
}

model Organisation {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  email       String   @unique
  commission  Float    @default(0)
  phoneNumber String
  logoUrl     String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("organisations")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model Sender {
  id                   String   @id @default(cuid())
  studentName          String
  studentEmailOriginal String
  studentEmailFake     String
  phoneNumber          String
  addressLine1         String
  addressLine2         String?
  state                String
  postalCode           String
  nationality          String   @default("indian")
  relationship         String   @default("self")
  senderName           String?
  bankCharges          String?
  dob                  String?
  pancardNumber        String?
  senderNationality    String?  @default("indian")
  senderEmail          String?
  sourceOfFunds        String?
  occupationStatus     String?
  senderAddressLine1   String?
  senderAddressLine2   String?
  senderState          String?
  senderPostalCode     String?
  status               String   @default("pending")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  orders               Order[]

  @@map("senders")
}

model Beneficiary {
  id                        String   @id @default(cuid())
  receiverFullName          String
  receiverCountry           String
  address                   String
  receiverBank              String
  receiverBankAddress       String
  receiverBankCountry       String
  receiverAccount           String
  receiverBankSwiftCode     String
  iban                      String?
  sortCode                  String?
  transitNumber             String?
  bsbCode                   String?
  routingNumber             String?
  anyIntermediaryBank       String   @default("NO")
  intermediaryBankName      String?
  intermediaryBankAccountNo String?
  intermediaryBankIBAN      String?
  intermediaryBankSwiftCode String?
  totalRemittance           String
  field70                   String?
  status                    Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  orders                    Order[]

  @@map("beneficiaries")
}

model Order {
  id                  String       @id
  purpose             String
  foreignBankCharges  Float
  payer               String
  margin              Float
  receiverBankCountry String
  studentName         String
  consultancy         String
  ibrRate             Float
  amount              Float
  currency            String
  totalAmount         Float
  customerRate        Float
  pancardNumber       String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  status              OrderStatus
  calculations        Json
  createdBy           String
  createdUser         String?
  generatedPDF        String
  quote               Json
  beneficiaryId       String?
  senderId            String?
  educationLoan       String?
  forexPartner        Json?
  documents           Document[]
  beneficiary         Beneficiary? @relation(fields: [beneficiaryId], references: [id])
  sender              Sender?      @relation(fields: [senderId], references: [id])

  @@map("orders")
}

model Document {
  id         String       @id @default(cuid())
  role       DocumentRole
  userId     String
  type       DocumentType
  imageUrl   String
  fileSize   Int? // Add this field
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  orderId    String?
  comment    String?
  name       String?
  uploadedBy String?
  order      Order?       @relation(fields: [orderId], references: [id])

  @@map("documents")
}

model DownloadedQuotes {
  id           String   @id @default(cuid())
  username     String
  createdBy    String
  quote        Json
  calculations Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  generatedPDF String?

  @@map("downloaded_quotes")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  MANAGER
  AGENT
  SUB_AGENT
  ORGANISATION_ADMIN
  ORGANISATION_USER
}

enum DocumentType {
  PAN
  IDENTITY
  UNIVERSITY_OFFER_LETTER
  PASSPORT_FRONT
  VISA_PRP
  VISA_INVOICE
  FLYWIRE_INSTRUCTION
  BLOCKED_ACCOUNT_LETTER
  INVOICE
  GIC_LETTER
  LOAN_SANCTION_LETTER
  A2_FORM
  OTHER
}

enum DocumentRole {
  SENDER
  BENEFICIARY
  STUDENT
  ORDER
}

enum OrderStatus {
  Received
  RateCovered
  Pending
  Rejected
  Completed
  QuoteDownloaded
  Authorized
  DocumentsPlaced
  RateExpired
  Blocked
}
